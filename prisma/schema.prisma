generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String? // optional seperti di model baru
  email         String?   @unique
  emailVerified DateTime?
  image         String? // menggantikan photo_profile

  address String? // bisa diasumsikan pengganti school_id atau alamat umum

  // Relasi tambahan dari model baru
  accounts Account[]
  sessions Session[]

  // Relasi dari model lama yang tetap dipertahankan
  project      project[]
  classes      String? // kelas
  show         Boolean             @default(false)
  years_old    String? // umur
  cover        String? // yang ditampilkan di halaman awal
  school_id    String? // ID sekolah
  school       school_information?
  work_status  String?
  skill        type_skill[]
  role         Role                @default(SUPERADMIN)
  social_media social_media[]
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model type_skill {
  id      String  @id @default(uuid())
  name    String //untuk mengidentifikasi seperti software or hardware
  user_id String
  user    User    @relation(references: [id], fields: [user_id])
  skill   skill[]
}

model skill {
  id      String      @id @default(uuid())
  type_id String
  type    type_skill  @relation(references: [id], fields: [type_id], onDelete: Cascade)
  name    String
  grade   grade_skill @default(Beginner)
}



model school_information {
  id       String  @id @default(uuid())
  user_id  String? @unique
  user     User?   @relation(references: [id], fields: [user_id], onDelete: Cascade)
  name     String
  major    String?
  location String
}

model carousel {
  id   String  @id @default(uuid())
  path String
  desc String?
}

model product {
  id          String    @id @default(uuid())
  name        String?
  path        String
  desc        String?
  date        String?
  category_id String?
  category    category? @relation(references: [id], fields: [category_id], onDelete: Cascade)
}

model category {
  id      String    @id @default(uuid())
  name    String
  cover   String
  product product[]
}

model social_media {
  id      String  @id @default(uuid())
  name    String
  link    String
  user_id String
  user    User    @relation(references: [id], fields: [user_id], onDelete: Cascade)
}

model project {
  id          String  @id @default(uuid())
  name        String
  description String?
  cover       String?
  url         String?
  user_id     String?
  user        User?   @relation(references: [id], fields: [user_id], onDelete: Cascade)
}

enum Role {
  SUPERADMIN
  ADMIN
  USER
}


enum grade_skill {
  Beginner
  Intermediate
  Expert
}